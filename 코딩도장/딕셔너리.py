# 딕셔너리 사용하기
# 파이썬에서는 연관된 값을 묶어서 저장하는 용도로
# 딕셔너리라는 자료형을 제공함

# 딕셔너리는 값마다 이름을 붙여서 저장하는 방식
# 사전(dictionary)에서 단어를 찾듯이 값을 가져올 수 있다고 하여 딕셔너리라고 부름

# 딕셔너리 만들기
# 딕셔너리는 {}(중괄호) 안에 키: 값 형식으로 저장하며
# 각 키와 값은 ,(콤마)로 구분해줌
# 키에는 값을 하나만 지정할 수 있으며 이런 특성을 따서
# 키-값 쌍 이라 부름
# 럭스라는 캐릭터의 체력 : 490, 마나:334, 사거리 550, 방어력: 18.72
#lux = {'health':490, 'mana':334, 'melee':550, 'armor': 18.72}
# print(lux)

# 키값이 중복 되면?
#lux = {'health':490, 'mana':334, 'melee':550, 'armor': 18.72}
#lux = {'health':490, 'health':880, 'melee':550, 'armor': 18.72}
# print(lux)
# 딕셔너리에 키와 값을 저장할 때 키가 중복되면 가장 뒤에 있는 값만 사용
# 중복되는 키는 저장 되어지지않음

# 딕셔너리 키의 자료형
# 딕셔너리의 키는 문자열뿐만 아니라 정수, 실수, 불도 사용할 수 있으며
# 자료형을 섞어서 사용해도 됨.
# 값에는 리스트, 딕셔너리 등을 포함하여 모든 자료형을 사용할 수 있음
# 키에는 리스트와 딕셔너리를 사용할 수 없음
#x = {100:'hundred', False:0, 3.5:[3.5, 3.5]}
# print(x)

# 빈 딕셔너리 만들기
#x = {}
#y = dict()

# dict로 딕셔너리 만들기
# dict는 다음과 같이 키와 값을 연결하거나, 리스트, 튜플, 딕셔너리로
# 딕셔너리를 만들 때 사용함
#딕셔너리 = dict(키1=값1, 키2=값2)
#딕셔너리 = dict(zip([키1, 키1],[값1, 값2]))
#딕셔너리 = dict([(키1,값1),(키2,값2)])
# 딕셔너리 = dict([키1:값1, 키2: 값2])
# dict에서 키=값 형식으로 딕셔너리를 만들 수 있음
# 키에 ''(작은따옴표)나 ""(큰따옴표)를 사용하지 않아야함
# 키는 딕셔너리를 만들고 나면 문자열로 바뀜
#lux = dict(health=490, mana=334, melee=550, armor=18.72)
# print(lux)

# 두 번째 방법은 dict에서 zip 함수를 이용하는 방법
# 키가 들어있는 리스트와 값이 들어있는 리스트를 차례대로 zip에 넣은 뒤
# 다시 dict에 넣어주면 됨
# 키와 값을 리스트가아닌 튜플에 저장해서 zip에 넣어도 됨
#lux = dict(zip(['health','mana','melee','armor'],[490,334,550,18.72]))
# print(lux)

# -----------------------------------------------------------------------------
# 딕셔너리의 키에 접근하고 값 할당하기
#lux = {'health':490, 'mana':334, 'melee':550, 'armor': 18.72}
# 딕셔너리의 키에 접근할 대는 딕셔너리 뒤에[](대괄호)를 사용하며
# [] 안에 키를 지정해주면 됨
# print(lux['health'])

# 딕셔너리는 []로 키에 접근한 뒤 값을 할당함
#lux['health'] = 2030
# print(lux['health'])
# *만약 딕셔너리에 없는 키에 값을 할당하면 해당 키가 추가되고 값이 할당됨
#lux['Jumunpowar'] = 300
# print(lux) #{'health': 490, 'mana': 334, 'melee': 550, 'armor': 18.72, 'Jumunpowar': 300}

# *하지만 딕셔너리에 없는 키에서 값을 가져오려고 하면 에러가 발생함
# (키값만 넣으면 오류발생)
# lux['Jumunpowar']

# 딕셔너리에서 키가 있는지 확인하고 싶다면 in 연산자를 사용하면됨
# print('health' in lux) #True
# print('health' not in lux) #False

# 딕셔너리의 키 개수 구하기
# 딕셔너리를 사용하다 보면 딕셔너리의 키 개수(길이)를 구할 필요가 있음
# 실무에서는 함수등을 사용해서 딕셔너리를 생성하거나 키를 추가하기 때문에
# 키의 개수가 눈에 보이지 않음
# 키의 개수는 len 함수를 사용하여 구함(키와 값은 1:1 관계이므로 키의 개수는 곧 값의 개수임)
# print(len(lux)) #4

# 딕셔너리를 생성할때는{}(중괄호)를 사용하고,
# 키와 값을 1:1 관계로 저장한다는 점이 중요함
# 딕셔너리는 특정 주제에 대해 연관된 값을 저장할 때 사용한다는 점도 꼭 기억해두자.

# 12.5 심사문제 : 딕셔너리에 게임 캐릭터 능력치 저장하기
#keys = input().split()
#gaps = map(float, (input().split()))
#lux = dict(zip(keys,gaps))

# print(lux)
#import math

#orderAmount = 120
#taxFreeAmount = 20
#serviceFee = 0

#gase = orderAmount - taxFreeAmount
#bugaci= math.ceil((gase * 10.0 / 100.0))


# print(bugaci)
