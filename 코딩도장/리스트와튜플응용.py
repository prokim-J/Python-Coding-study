# 파이썬의 리스트는 생각보다 기능이 많은데, 요소를 추가/삭제하거나,
# 정보를 조회하는 메서드(함수)도 제공함
# for 반복문과 결합하면 연속적이고 반복되는 값을 손쉽게 처리할 수 있음
 
# 리스트 조작하기
# 리스트를 조작하는 메서드(method)임(메서드는 객체에 속한 함수를 뜻함)

# 리스트에 요소 추가하기
# append : 요소를 하나 추가
# extend : 리스트를 연결하여 확장
# insert : 특정 인덱스에 요소 추가

# 리스트에 요소 하나 추가하기
#x = [1, 2, 3, 4, 5]
#x.append(6)
#print(x)
#print(len(x))

# 물론 빈 리스트에 값을 추가할수도 있음
#x = []
#x.append(1)
#print(x)

# 리스트 안에 리스트 추가하기
#x = [1,2,3]
#x.append([4,5,6])
#print(x)

# 리스트 확장하기
#x = [1,2,3]
#x.extend([4,5,6])
#print(x)

# 리스트 하나의 요소를 추가할때는 append
# 여러개의 요소를 추가할때는 extend

# 리스트의 특정 인덱스에 요소 추가하기
# 특정 인덱스 요소에 지정하여 다른값으로 변환할때 insert
#x= [1,2,3,4]
#x.insert(2, 300)
#print(x)

# insert(0, 요소) : 리스트의 맨 처음에 요소를 추가
# insert(len(리스트), 요소) : 리스트 끝에 요소를 추가

# len(리스트)는 마지막 인덱스보다 1이 더 크기때문에 리스트 끝에 값을 추가할 때
# 자주 활용함
# insert는 요소 하나를 추가하므로 insert에 리스트를 넣으면 append처럼
# 리스트 안에 리스트가 들어감
#x = [10, 20, 30]
#x.insert(1, [10.5, 11])
#print(x) # [10, [10.5, 11], 20, 30]

#x = [10, 20, 30]
#x[1:2] = [200, 300]
#print(x)  # [10, 200, 300, 30]

#리스트에서 요소 삭제하기
# pop : 마지막 요소 또는 특정 인덱스의 요소를 삭제
# remove : 특정 값을 찾아서 삭제

#pop 대신 del을 사용해도 상관없음
#a = [10,20,30]
#a.pop()
#print(a)

#remove(값)은 리스트에서 특정 값을 찾아서 삭제함
#a = [10, 20, 30]
#a.remove(20)
#print(a)

#리스트에 같은 값이 여러개 있을경우 처음 찾은 값을 삭제함
#a = [10, 20, 30, 40, 20]
#a.remove(20)
#print(a)

#리스트로 스택 만들기
# 스택 : 한쪽으로 들어가고 한쪽으로만 나감

#리스트로 큐 만들기
# 큐 : 한쪽으로 나가고 한쪽에선 들어오는것

#리스트에서 특정 값의 인덱스 구하기
#index(값)은 리스트에서 특정 값의 인덱스를 구함
#같은 값이 여러 개일 경우 처음 찾은 인덱스를 구함
#a = [10,20,30,40,40]
#a.index(40)
#print(a.index(40))

#특정 값의 개수 구하기
#a = [10, 20, 30, 40, 50]
#print(a.count(30))


#리스트의 순서를 뒤집기
#a = [10, 20, 30, 40]
#a.reverse()
#print(a)

#리스트의 요소를 정렬하기
#sort()는 리스트의 요소를 작은 순서대로 정렬함(오름차순)
#sort(reverse-True) : 리스트의 값을 큰 순서대로 정렬(내림차순)

#리스트의 모든 요소를 삭제하기
# clear()는 리스트의 모든 요소를 삭제함
# clear()대신 del a[:]와 같이 시작, 끝 인덱스를 생략하여 리스트의
# 모든 요소를 삭제할 수도 있음

#리스트를 슬라이스로 조작하기
#a = [10, 20, 30]
#a[len(a):] = [500]
#print(a) # [10, 20, 30, 500]

#리스트의 할당과 복사 알아보기
#리스트 a와 b를 완전히 두 개로 만들려면 copy 메서드로 모든 요소를 복사해야함
#a = [1,2,3,4,5]
#b = a
#b = a.copy()
#print(a is b) # True
#b[2] = 500
#print(a)

#for 반복문으로 요소 출력하기
#a = [10, 20, 30, 40, 50]
#for i in a:
#    print(i)

#인덱스와 요소를 함께 출력하기
#a = [10, 33, 45, 60, 87]
#for index, value in enumerate(a):
#    print(index + 1, value)

#for index, value in enumerate(a, start=1):
#    print (index, value)

#while 반복문으로 요소 출력하기
#a = [10, 20 ,30 ,40 ,50]
#i = 0
#while i < len(a):
#    print(a[i])
#    i += 1

#리스트의 가장 작은 수, 가장 큰 수, 합계 구하기
#요소를 모두 반복하면서 숫자를 찾아내보자
#숫자를 계속 비교해서 숫자가 작으면 smallist를 바꾸는 방식임
#a = [38, 27, 32, 45, 57, 62]
#smallist = a[0]
#for i in a:
#    if i < smallist:
#        smallist = i
#        print(i)

#가장 큰 수는 부등호를 반대로 만들면됨
#a = [38, 27, 32, 45, 57, 62]
#biglist = a[0]
#for i in a:
#    if i > biglist:
#        biglist = i 
#print(biglist)

#리스트를 작은 순서대로 정렬(오름차순) 하면 첫 번째 요소가 가장 작은수임
#a = [38, 27, 32, 45, 57, 62]
#a.sort()
#a = a[0]
#print(a)

#리스트를 큰 순서대로 정렬(내림차순) 하면 첫 번째 요소가 가장 작은수임
#a = [38, 27, 32, 45, 57, 62]
#a.sort(reverse=True)  # reverse=True 오름차순의 반대
#a = a[0]
#print(a)

#가장 간단한 방법은 파이썬에서 제공하는 min, max 함수를 사용하면됨
#a = [38, 27, 32, 45, 57, 62]
#가장 작은수
#print(min(a))
#가장 큰수
#print(max(a))

#요소의 합계 구하기
#합계를 구할 때도 반복문을 사용할 수 있음
#a = [10,20,30,40,50]
#x = 0
#for i in a:
#    x+=i
#print(x)

#파이썬에서는 합계를 구하는 sum함수를 제공함
#a = [10,20,30,40,50]
#print(sum(a))

#min, max, sum에는 리스트뿐만 아니라 모든 반복 가능한 객체(iterable)를 넣을 수 있음

# 리스트 표현식 사용하기
# 파이썬의 리스트가 특이한 점은 리스트 안에 for반복문과 if 조건문을 사용할 수 있다는 점
# 리스트 안에 식, for 반복문, if 조건문 등을 지정하여 리스트를 생성하는 것을 
# 리스트 컴프리헨션(listcomprehension)이라고 함
# 책이나 인터넷에서도 리스트 내포, 리스트 내장, 리스트 축약, 리스트 해석 등으로 씀
# 컴프리헨션은 능력, 이해력, 시험 등의 뜻도 있지만, 어떤 것을 잡아서 담아둔다는 뜻이 있음
# 식으로 지정해서 생성된 것을 리스트로 잡아두는 것이 리스트 컴프리헨션임

#range(10)으로 0부터 9까지 생성하여 변수 i에 숫자를 꺼내고, 최종적으로 i를
#이용하여 리스트를 만든다는 뜻
#a = [i for i in range(10)] # 0부터 9까지 숫자를 생성하여 리스트 생성
#print(a)

#b = list(i for i in range(10)) # 0부터 9까지 숫자를 생성하여 리스트 생성
#print(b)

#[i for i in range(10)]은 변수 i 를 그대로 사용하지만, 
#다음과 같이 식 부분에서 i를 다른 값과 연산하면 각 연산의 결과를 리스트로 생성함
#c = [i+5 for i in range(10)]
#print(c)

#d = [(i+1)*2 for i in range(10)]
#print(d)

#다음과 같이 if조건문은 for 반복문 뒤에 지정함
#a = [i for i in range(10) if i % 2 == 0]
#print(a)

#다음과 같이 i를 다른 값과 연산해서 리스트를 만들어도 됨
#b = [i + 5 for i in range(10) if i % 2 == 1]
#print(b)

#for 반복문과 if 조건문을 여러 번 사용하기
# 2단부터 9단까지 구구단을 리스트 생성함

#a = [i * j for j in range(2, 10) for i in range(1, 10)]
#print(a)

#코드를 한줄로 입력했지만 다음과 같이 여러 줄로 입력해도 됨
#들여쓰기는 해도 되고 하지 않아도 됨
#가독성을 위해 들여쓰기를 해주는 것이 좋음

#리스트 표현식에서 for문이 여러개일때의 처리 순서는 뒤에서부터 시작
#a = [i * j for j in range(2, 10)
#           for i in range(1, 10)]
#print(a)

#리스트에 map 사용하기
#map은 리스트의 요소를 지정된 함수로 처리해주는 함수임
#(map은 원본 리스트를 변경하지 않고 새 리스트를 생성)
# list(map(함수, 리스트))
# tuple(map(함수, 튜플))

#for 반복문을 사용해서 변환하기
#a = [1.2, 2.5, 3.7, 4.6]
#for i in range(len(a)):
#    a[i] = int(a[i])
#print(a)

#매번 for 반복문으로 반복하면서 요소를 변환하려니 조금 번거로우니 map을 사용하면 편리함
#a = [1.2, 2.5, 3.7, 4.6]
#a = list(map(int, a))
#print(a)

#range를 사용해서 숫자를 만든 뒤 숫자를 문자열로 변환해보자
#a = list(map(str, range(10)))
#print(a)

#input().split()과 map
#다음과 같이 input().split()을 사용한 뒤에 변수 한 개에 저장해보면 리스트인지
#확인할수있음
#a = input().split()
#print(a)

#이제 map을 사용해서 정수로 변환해 보자
#a = map(int, input().split())
#print(list(a))

#이 리스트 [10, 20]을 변수 두 개에 저장하면 지금까지 사용한 
# a, b = map(int, input().split())와 같은 동작이 됨
#사실 map이 반환하는 맵 객체는 이터레이터라서 변수 여러 개에 저장하는
#언패킹(unpacking)이 가능함

#a, b = map(int, input().split())처럼 list를 생략한 것임
#x = input().split() #input().split()의 결과는 문자열 리스트
#m = map(int, x) #리스트의 요소를 int로 변환, 결과는 맵 객체
#a, b = m  #맵 객체는 변수 여러 개에 저장할 수 있음

#튜플 응용하기
#튜플은 리스트와는 달리 내용을 변경할 수 없음(불변, immutable)
#내용을 변경하는 append같은 메서드는 사용할 수 없고, 요소의 정보를 구하는
#메서드만 사용할 수 있음

#튜플에서 특정 값의 인덱스 구하기
#같은 값이 여러 개일 경우 처음 찾은 인덱스를 구함(가장 작은 인덱스)
#a=(38, 21, 53, 23, 62, 19)
#print(a.index(53))

#특정 값의 개수 구하기
#a= (10, 20, 30, 20, 40, 50)
#print(a.count(20))

#for 반복문으로 요소 출력하기
#a = (10, 20, 30, 40, 50)
#for i in a:
#    print(i, end=' ')

#튜플 표현식 사용하기
#a = tuple(i for i in range(10) if i % 2 == 0)
#print(a)

#tuple에 map 사용하기
#a = (1.2, 2.3, 3.5, 4.5)
#a = tuple(map(int, a))
#print(a)

#튜플에서 가장 작은수, 가장 큰 수, 합계구하기
#a = (10, 20, 30, 40, 50)
#print(min(a))
#print(max(a))
#print(sum(a))

#리스트에서 특정 요소만 뽑아내기
#리스트 a에 들어있는 문자열 중에서 길이가 5인 것들만 리스트 형태로 출력되게 만드시오
#a = ['alpha', 'bravo', 'charlie', 'delta', 'echo', 'foxtrot', 'golf', 'hotel', 'india']
#b = [i for i in a if len(i) == 5]
#print(b)

#2의 거듭제곱 리스트 생성하기
a, b = map(int, input().split())
c = [2 ** i for i in range(a, b + 1)]
c.pop(1)
c.pop(-2)
print(c)
